{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f68f3d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ResNet50  Modello 1\n",
    "import os\n",
    "import json\n",
    "import torch\n",
    "import torchvision\n",
    "import torchvision.transforms as T\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from PIL import Image\n",
    "import numpy as np\n",
    "\n",
    "def get_image_paths(folder):\n",
    "    return [os.path.join(folder, f) for f in os.listdir(folder) if f.endswith('.jpg')]\n",
    "\n",
    "class ImageFolderDataset(Dataset):\n",
    "    def __init__(self, paths, transform=None):\n",
    "        self.paths = paths\n",
    "        self.transform = transform or T.Compose([\n",
    "            T.Resize(256),\n",
    "            T.CenterCrop(224),\n",
    "            T.ToTensor(),\n",
    "            T.Normalize(mean=[0.485,0.456,0.406], std=[0.229,0.224,0.225])\n",
    "        ])\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.paths)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        path = self.paths[idx]\n",
    "        img = Image.open(path).convert('RGB')\n",
    "        return self.transform(img), path\n",
    "\n",
    "# Load pretrained ResNet50 and remove last layer\n",
    "model = torchvision.models.resnet50(pretrained=True)\n",
    "model = torch.nn.Sequential(*list(model.children())[:-1])\n",
    "model.eval().cuda()\n",
    "\n",
    "# Paths\n",
    "gallery_folder = 'Data_example/test/gallery'\n",
    "query_folder   = 'Data_example/test/query'\n",
    "\n",
    "gallery_paths = get_image_paths(gallery_folder)\n",
    "query_paths   = get_image_paths(query_folder)\n",
    "\n",
    "# DataLoaders\n",
    "batch_size = 32\n",
    "gallery_loader = DataLoader(ImageFolderDataset(gallery_paths), batch_size=batch_size, shuffle=False)\n",
    "query_loader   = DataLoader(ImageFolderDataset(query_paths),   batch_size=batch_size, shuffle=False)\n",
    "\n",
    "# Extract features\n",
    "@torch.no_grad()\n",
    "def extract_features(loader):\n",
    "    feats, paths = [], []\n",
    "    for imgs, pths in loader:\n",
    "        imgs = imgs.cuda()\n",
    "        out = model(imgs).squeeze(-1).squeeze(-1)  # (B,2048)\n",
    "        feats.append(out.cpu().numpy())\n",
    "        paths.extend(pths)\n",
    "    feats = np.vstack(feats)\n",
    "    return feats, paths\n",
    "\n",
    "gallery_feats, gallery_paths = extract_features(gallery_loader)\n",
    "query_feats, query_paths     = extract_features(query_loader)\n",
    "\n",
    "# Normalize\n",
    "gallery_feats = gallery_feats / np.linalg.norm(gallery_feats, axis=1, keepdims=True)\n",
    "query_feats   = query_feats   / np.linalg.norm(query_feats,   axis=1, keepdims=True)\n",
    "\n",
    "# Compute cosine similarities and retrieve top-k\n",
    "k = 5  # set as needed\n",
    "results = []\n",
    "for q_feat, q_path in zip(query_feats, query_paths):\n",
    "    sims = gallery_feats.dot(q_feat)\n",
    "    topk_idx = np.argsort(-sims)[:k]\n",
    "    topk_paths = [gallery_paths[i] for i in topk_idx]\n",
    "    results.append({\n",
    "        'filename': q_path,\n",
    "        'gallery_images': topk_paths\n",
    "    })\n",
    "\n",
    "# Save to JSON\n",
    "with open('submission1.json', 'w') as f:\n",
    "    json.dump(results, f, indent=2)\n",
    "\n",
    "print('Saved submission.json')"
   ]
  }
