import os
import json
import torch
import torchvision
import torchvision.transforms as T
from torch.utils.data import Dataset, DataLoader
from PIL import Image
import numpy as np

def get_image_paths(folder):
    return [os.path.join(folder, f) for f in os.listdir(folder) if f.endswith('.jpg')]

class ImageFolderDataset(Dataset):
    def __init__(self, paths, transform=None):
        self.paths = paths
        self.transform = transform or T.Compose([
            T.Resize(256),
            T.CenterCrop(224),
            T.ToTensor(),
            T.Normalize(mean=[0.485,0.456,0.406], std=[0.229,0.224,0.225])
        ])

    def __len__(self):
        return len(self.paths)

    def __getitem__(self, idx):
        path = self.paths[idx]
        img = Image.open(path).convert('RGB')
        return self.transform(img), path

# Load pretrained ResNet50 and remove last layer
model = torchvision.models.resnet50(pretrained=True)
model = torch.nn.Sequential(*list(model.children())[:-1])
model.eval().cuda()

# Paths
gallery_folder = 'Data_example/test/gallery'
query_folder   = 'Data_example/test/query'

gallery_paths = get_image_paths(gallery_folder)
query_paths   = get_image_paths(query_folder)

# DataLoaders
batch_size = 32
gallery_loader = DataLoader(ImageFolderDataset(gallery_paths), batch_size=batch_size, shuffle=False)
query_loader   = DataLoader(ImageFolderDataset(query_paths),   batch_size=batch_size, shuffle=False)

# Extract features
@torch.no_grad()
def extract_features(loader):
    feats, paths = [], []
    for imgs, pths in loader:
        imgs = imgs.cuda()
        out = model(imgs).squeeze(-1).squeeze(-1)  # (B,2048)
        feats.append(out.cpu().numpy())
        paths.extend(pths)
    feats = np.vstack(feats)
    return feats, paths

gallery_feats, gallery_paths = extract_features(gallery_loader)
query_feats, query_paths     = extract_features(query_loader)

# Normalize
gallery_feats = gallery_feats / np.linalg.norm(gallery_feats, axis=1, keepdims=True)
query_feats   = query_feats   / np.linalg.norm(query_feats,   axis=1, keepdims=True)

# Compute cosine similarities and retrieve top-k
k = 5  # set as needed
results = []
for q_feat, q_path in zip(query_feats, query_paths):
    sims = gallery_feats.dot(q_feat)
    topk_idx = np.argsort(-sims)[:k]
    topk_paths = [gallery_paths[i] for i in topk_idx]
    results.append({
        'filename': q_path,
        'gallery_images': topk_paths
    })

# Save to JSON
with open('submission1.json', 'w') as f:
    json.dump(results, f, indent=2)

print('Saved submission.json')
